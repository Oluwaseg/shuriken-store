#!/usr/bin/env node

/**
 * Module dependencies.
 */
import debugModule from 'debug';
import dotenv from 'dotenv';
import { createServer } from 'http';
import { Server } from 'socket.io';
import app from '../app.js';
import connectDB from '../config/db.js';

dotenv.config();

const debug = debugModule('server:server');

connectDB();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = createServer(app);

// Initialize Socket.IO
const io = new Server(server, {
  cors: {
    origin: [
      process.env.ADMIN_URL,
      process.env.CLIENT_URL,
      process.env.ADMIN_DEVELOPMENT_URL,
      process.env.CLIENT_DEVELOPMENT_URL,
    ],
    credentials: true,
  },
});

console.log('Socket.IO initialized');

// Socket.IO Logic
io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  socket.on('disconnect', () => {
    console.log('A user disconnected:', socket.id);
  });

  socket.on('order-update', (data) => {
    console.log('Order Update:', data);
    io.emit('order-update', data); // Broadcast to all clients
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Handle uncaught exceptions
// process.on('uncaughtException', (err) => {
//   console.error(`Uncaught Exception: ${err.message}`);
//   console.error(err.stack);
//   console.log(`Shutting down the server due to Uncaught Exception`);

//   process.exit(1);
// });

// Handle unhandled promise rejections
// process.on("unhandledRejection", (reason, promise) => {
//   console.error(`Unhandled Rejection at: ${promise} reason: ${reason}`);
//   console.log(`Shutting down the server due to Unhandled Promise Rejection`);

//   server.close(() => {
//     process.exit(1);
//   });

//   setTimeout(() => {
//     console.error("Forcing exit due to server close timeout");
//     process.exit(1);
//   }, 5000);
// });
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise);

  if (reason instanceof Error) {
    console.error('Reason:', reason.message);
    console.error(reason.stack);
  } else {
    console.error('Reason:', JSON.stringify(reason, null, 2));
  }

  if (isCriticalError(reason)) {
    console.log('Critical unhandled rejection. Shutting down the server.');
    server.close(() => {
      process.exit(1);
    });
  } else {
    console.log(
      'Non-critical unhandled rejection. Continuing server operation.'
    );
  }
});

function isCriticalError(error) {
  // Adjust this logic based on your application's critical error types
  return error && error.http_code === 499;
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);

  console.log('Server started at http://localhost:' + addr.port);
}
